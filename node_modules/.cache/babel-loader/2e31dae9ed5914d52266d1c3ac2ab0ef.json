{"ast":null,"code":"var _jsxFileName = \"/Users/saikenho/javascript/01-starting-project 2/src/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  itme: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    // add an item to the array but generates another array using concat()\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n  }\n\n  ;\n  return {\n    items: updatedItems,\n    total\n  };\n}; //this is the cart provider context that wraps all the data so it can be used in multiple components \n\n\nconst CartProvider = props => {\n  _s();\n\n  // call use reducer it needs the previous state and then dispatch an action \n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    // you can name however you want but you need to be descriptive \n    // it pretty much obtains the item which will be used to handle the current state\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemCartHandler\n  }; // wraps all the children \n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 8\n  }, this);\n};\n\n_s(CartProvider, \"2SyrzIf5h4zAVB5yWzJ1q/dSUlI=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/saikenho/javascript/01-starting-project 2/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","itme","totalAmount","cartReducer","state","action","type","updatedItems","items","concat","item","updatedTotalAmount","price","amount","total","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAAQA,UAAR,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAGA,MAAMC,gBAAgB,GAAC;AACvBC,EAAAA,IAAI,EAAC,EADkB;AAEvBC,EAAAA,WAAW,EAAC;AAFW,CAAvB;;AAKA,MAAMC,WAAW,GAAC,CAACC,KAAD,EAAOC,MAAP,KAAiB;AAC/B,MAAGA,MAAM,CAACC,IAAP,KAAc,KAAjB,EAAuB;AACnB;AACA,UAAMC,YAAY,GAACH,KAAK,CAACI,KAAN,CAAYC,MAAZ,CAAmBJ,MAAM,CAACK,IAA1B,CAAnB;AACA,UAAMC,kBAAkB,GAACP,KAAK,CAACF,WAAN,GAAkBG,MAAM,CAACK,IAAP,CAAYE,KAAZ,GAAkBP,MAAM,CAACK,IAAP,CAAYG,MAAzE;AACC;;AAAA;AACT,SAAO;AACHL,IAAAA,KAAK,EAACD,YADH;AAEHO,IAAAA;AAFG,GAAP;AAKC,CAXD,C,CAYA;;;AACA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B;AACD,QAAM,CAACC,SAAD,EAAWC,kBAAX,IAAgCpB,UAAU,CAACK,WAAD,EAAaH,gBAAb,CAAhD;;AAEC,QAAMmB,oBAAoB,GAAGT,IAAI,IAAI;AACjC;AACA;AACAQ,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,KAAP;AAAaI,MAAAA,IAAI,EAACA;AAAlB,KAAD,CAAlB;AACH,GAJD;;AAMA,QAAMU,qBAAqB,GAAIC,EAAD,IAAO;AACjCH,IAAAA,kBAAkB,CAAC;AAACZ,MAAAA,IAAI,EAAE,QAAP;AAAgBe,MAAAA,EAAE,EAACA;AAAnB,KAAD,CAAlB;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAC;AACdd,IAAAA,KAAK,EAACS,SAAS,CAACT,KADF;AAEdN,IAAAA,WAAW,EAACe,SAAS,CAACf,WAFR;AAGdqB,IAAAA,OAAO,EAACJ,oBAHM;AAIdK,IAAAA,UAAU,EAACJ;AAJG,GAAlB,CAd4B,CAqB5B;;AACJ,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACFN,KAAK,CAACS;AADJ;AAAA;AAAA;AAAA;AAAA,UAAP;AAIC,CA1BD;;GAAMV,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["import {useReducer} from 'react';\nimport CartContext from './cart-context';\n\n\nconst defaultCartState={ \nitme:[], \ntotalAmount:0,\n};\n\nconst cartReducer=(state,action)=> { \n    if(action.type==='ADD'){ \n        // add an item to the array but generates another array using concat()\n        const updatedItems=state.items.concat(action.item);\n        const updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount\n        };\nreturn { \n    items:updatedItems, \n    total\n\n}\n};\n//this is the cart provider context that wraps all the data so it can be used in multiple components \nconst CartProvider = (props) => {\n    // call use reducer it needs the previous state and then dispatch an action \n   const [cartState,dispatchCartAction]= useReducer(cartReducer,defaultCartState) ; \n   \n    const addItemToCartHandler = item => { \n        // you can name however you want but you need to be descriptive \n        // it pretty much obtains the item which will be used to handle the current state\n        dispatchCartAction({type: 'ADD',item:item})\n    };\n\n    const removeItemCartHandler = (id)=> {\n        dispatchCartAction({type: 'REMOVE',id:id})\n    };\n\n    const cartContext={ \n        items:cartState.items, \n        totalAmount:cartState.totalAmount, \n        addItem:addItemToCartHandler ,\n        removeItem:removeItemCartHandler,\n\n    };\n    // wraps all the children \nreturn <CartContext.Provider value={cartContext}>\n    {props.children }\n</CartContext.Provider>\n\n}; \nexport default CartProvider; "]},"metadata":{},"sourceType":"module"}
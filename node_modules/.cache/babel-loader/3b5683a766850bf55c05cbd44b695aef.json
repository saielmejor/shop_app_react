{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SAIKEN\\\\React JS\\\\shop-app\\\\shop_app_react\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\"; // define default Cart State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    // add an item to the array but generates another array using concat()\n    const updatedItems = state.items.concat(action.item); //items in the current state and concat adds new items into new array\n\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //accessing the existing cart item\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItem;\n    let updatedItemsl;\n\n    if (existingCartItem) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n    } //return new updated state snapshot\n\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n}; //this is the cart provider context that wraps all the data so it can be used in multiple components\n\n\nconst CartProvider = props => {\n  _s();\n\n  // call use reducer it needs the previous state and then dispatch an action\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    // you can name however you want but you need to be descriptive\n    // it pretty much obtains the item which will be used to handle the current state\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    }); // you can dispatch anything you want\n    // add the item to the reducing\n  };\n\n  const removeItemCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemCartHandler\n  }; // wraps all the children\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/SAIKEN/React JS/shop-app/shop_app_react/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItem","updatedItemsl","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB,CAFyB,CAE6B;;AACtD,UAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MADtD,CAHyB,CAMzB;;AAEA,UAAMC,qBAAqB,GAAGT,KAAK,CAACH,KAAN,CAAYa,SAAZ,CAC3BL,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYV,MAAM,CAACI,IAAP,CAAYM,EADN,CAA9B;AAIA,UAAMC,gBAAgB,GAACZ,KAAK,CAACH,KAAN,CAAYY,qBAAZ,CAAvB;AAEA,QAAII,WAAJ;AACA,QAAIC,aAAJ;;AAEA,QAAIF,gBAAJ,EAAqB;AACjBC,MAAAA,WAAW,GAAC,EACR,GAAGD,gBADK;AAERJ,QAAAA,MAAM,EAACI,gBAAgB,CAACJ,MAAjB,GAAyBP,MAAM,CAACI,IAAP,CAAYG;AAFpC,OAAZ;AAIAL,MAAAA,YAAY,GAAC,CAAC,GAAGH,KAAK,CAACH,KAAV,CAAb;AACH,KAvBwB,CAwBzB;;;AACA,WAAO;AACLA,MAAAA,KAAK,EAAEM,YADF;AAELL,MAAAA,WAAW,EAAEQ;AAFR,KAAP;AAID;;AAED,SAAOV,gBAAP;AACD,CAjCD,C,CAkCA;;;AACA,MAAMmB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B;AACA,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCxB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMuB,oBAAoB,GAAId,IAAD,IAAU;AACrC;AACA;AACAa,IAAAA,kBAAkB,CAAC;AAAEhB,MAAAA,IAAI,EAAE,KAAR;AAAeG,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB,CAHqC,CAGY;AACjD;AACD,GALD;;AAOA,QAAMe,qBAAqB,GAAIT,EAAD,IAAQ;AACpCO,IAAAA,kBAAkB,CAAC;AAAEhB,MAAAA,IAAI,EAAE,QAAR;AAAkBS,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMU,WAAW,GAAG;AAClBxB,IAAAA,KAAK,EAAEoB,SAAS,CAACpB,KADC;AAElBC,IAAAA,WAAW,EAAEmB,SAAS,CAACnB,WAFL;AAGlBwB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB,CAlB8B,CAwB9B;;AACA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA9BD;;GAAMT,Y;;KAAAA,Y;AA+BN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\n// define default Cart State\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    // add an item to the array but generates another array using concat()\r\n    const updatedItems = state.items.concat(action.item); //items in the current state and concat adds new items into new array\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    //accessing the existing cart item\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n\r\n    const existingCartItem=state.items[existingCartItemIndex];\r\n\r\n    let updatedItem; \r\n    let updatedItemsl \r\n    \r\n    if (existingCartItem){ \r\n        updatedItem={ \r\n            ...existingCartItem,\r\n            amount:existingCartItem.amount +action.item.amount\r\n        };\r\n        updatedItems=[...state.items ]\r\n    }\r\n    //return new updated state snapshot\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n//this is the cart provider context that wraps all the data so it can be used in multiple components\r\nconst CartProvider = (props) => {\r\n  // call use reducer it needs the previous state and then dispatch an action\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    // you can name however you want but you need to be descriptive\r\n    // it pretty much obtains the item which will be used to handle the current state\r\n    dispatchCartAction({ type: \"ADD\", item: item }); // you can dispatch anything you want\r\n    // add the item to the reducing\r\n  };\r\n\r\n  const removeItemCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemCartHandler,\r\n  };\r\n  // wraps all the children\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}